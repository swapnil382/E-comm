{"ast":null,"code":"var _jsxFileName = \"C:\\\\Swapnil\\\\E-commerce_react\\\\projfrontend\\\\src\\\\core\\\\Paypalcheckout.js\";\nimport DropIn from \"braintree-web-drop-in-react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { isAutheticated } from \"../auth/helper\";\nimport { cartEmpty, loadcart } from \"./helper/CartHelper\";\nimport { createOrder } from \"./helper/OrderHelper\";\nimport { getmeToken, processPayment } from \"./helper/PaypalHelper\";\n\nconst PayPalcheckout = ({\n  products,\n  setReload = f => f,\n  reload = undefined\n}) => {\n  const [info, setInfo] = useState({\n    loading: false,\n    success: false,\n    clientToken: null,\n    error: \"\"\n  });\n\n  const userId = isAutheticated() && isAutheticated().user._id;\n\n  const token = isAutheticated() && isAutheticated().token;\n\n  const getToken = (userId, token) => {\n    console.log(\"INFORMATION\", info);\n    getmeToken(userId, token).then(info => {\n      if (info.error) {\n        setInfo({ ...info,\n          error: info.error\n        });\n      } else {\n        const clientToken = info.clientToken;\n        console.log(\"clientToken\", info.error);\n        setInfo({\n          clientToken\n        });\n      }\n    });\n  };\n\n  useEffect(() => {\n    getToken(userId, token);\n  }, []);\n  return React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"paypal\");\n};\n\nexport default PayPalcheckout;","map":{"version":3,"sources":["C:/Swapnil/E-commerce_react/projfrontend/src/core/Paypalcheckout.js"],"names":["DropIn","React","useState","useEffect","Link","isAutheticated","cartEmpty","loadcart","createOrder","getmeToken","processPayment","PayPalcheckout","products","setReload","f","reload","undefined","info","setInfo","loading","success","clientToken","error","userId","user","_id","token","getToken","console","log","then"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,6BAAnB;AACA,OAAOC,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,cAAT,QAA+B,gBAA/B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,qBAApC;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,uBAA3C;;AAGA,MAAMC,cAAc,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAUC,EAAAA,SAAS,GAAGC,CAAC,IAAIA,CAA3B;AAA6BC,EAAAA,MAAM,GAAGC;AAAtC,CAAD,KAAsD;AAEzE,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBhB,QAAQ,CAAC;AAC5BiB,IAAAA,OAAO,EAAC,KADoB;AAE5BC,IAAAA,OAAO,EAAC,KAFoB;AAG5BC,IAAAA,WAAW,EAAC,IAHgB;AAI5BC,IAAAA,KAAK,EAAC;AAJsB,GAAD,CAA/B;;AAOA,QAAMC,MAAM,GAAGlB,cAAc,MAAOA,cAAc,GAAGmB,IAAjB,CAAsBC,GAA1D;;AACA,QAAMC,KAAK,GAAGrB,cAAc,MAAMA,cAAc,GAAGqB,KAAnD;;AAGA,QAAMC,QAAQ,GAAG,CAACJ,MAAD,EAAQG,KAAR,KAAkB;AAC/BE,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BZ,IAA1B;AACAR,IAAAA,UAAU,CAACc,MAAD,EAAQG,KAAR,CAAV,CAAyBI,IAAzB,CAA8Bb,IAAI,IAAI;AAClC,UAAGA,IAAI,CAACK,KAAR,EAAc;AACVJ,QAAAA,OAAO,CAAC,EAAC,GAAGD,IAAJ;AAASK,UAAAA,KAAK,EAACL,IAAI,CAACK;AAApB,SAAD,CAAP;AACH,OAFD,MAEK;AACD,cAAMD,WAAW,GAAGJ,IAAI,CAACI,WAAzB;AACAO,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BZ,IAAI,CAACK,KAA/B;AACAJ,QAAAA,OAAO,CAAC;AAACG,UAAAA;AAAD,SAAD,CAAP;AACH;AACJ,KARD;AASH,GAXD;;AAaAlB,EAAAA,SAAS,CAAC,MAAM;AACZwB,IAAAA,QAAQ,CAACJ,MAAD,EAAQG,KAAR,CAAR;AACH,GAFQ,EAEP,EAFO,CAAT;AAIA,SACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH,CAjCD;;AAmCA,eAAef,cAAf","sourcesContent":["import DropIn from \"braintree-web-drop-in-react\"\r\nimport React,{useState,useEffect} from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\nimport { isAutheticated } from \"../auth/helper\"\r\nimport { cartEmpty, loadcart } from \"./helper/CartHelper\"\r\nimport { createOrder } from \"./helper/OrderHelper\"\r\nimport { getmeToken, processPayment } from \"./helper/PaypalHelper\"\r\n\r\n\r\nconst PayPalcheckout = ({products,setReload = f => f,reload = undefined}) => {\r\n    \r\n    const [info,setInfo] = useState({\r\n        loading:false,\r\n        success:false,\r\n        clientToken:null,\r\n        error:\"\"\r\n    })\r\n\r\n    const userId = isAutheticated() &&  isAutheticated().user._id\r\n    const token = isAutheticated() && isAutheticated().token\r\n    \r\n     \r\n    const getToken = (userId,token) => {\r\n        console.log(\"INFORMATION\",info)\r\n        getmeToken(userId,token).then(info => {\r\n            if(info.error){\r\n                setInfo({...info,error:info.error})\r\n            }else{\r\n                const clientToken = info.clientToken\r\n                console.log(\"clientToken\",info.error)\r\n                setInfo({clientToken})\r\n            }\r\n        })\r\n    }\r\n\r\n    useEffect(() => {\r\n        getToken(userId,token)\r\n    },[])\r\n\r\n    return(\r\n        <h3>paypal</h3>\r\n    )\r\n}\r\n\r\nexport default PayPalcheckout"]},"metadata":{},"sourceType":"module"}